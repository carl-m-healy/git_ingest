{
  "_links": {
    "html": "https://github.com/carl-m-healy/workout_app/tree/feature/o1-mini-model",
    "self": "https://api.github.com/repos/carl-m-healy/workout_app/branches/feature/o1-mini-model"
  },
  "commit": {
    "author": {
      "avatar_url": "https://avatars.githubusercontent.com/u/62735761?v=4",
      "events_url": "https://api.github.com/users/carl-m-healy/events{/privacy}",
      "followers_url": "https://api.github.com/users/carl-m-healy/followers",
      "following_url": "https://api.github.com/users/carl-m-healy/following{/other_user}",
      "gists_url": "https://api.github.com/users/carl-m-healy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/carl-m-healy",
      "id": 62735761,
      "login": "carl-m-healy",
      "node_id": "MDQ6VXNlcjYyNzM1NzYx",
      "organizations_url": "https://api.github.com/users/carl-m-healy/orgs",
      "received_events_url": "https://api.github.com/users/carl-m-healy/received_events",
      "repos_url": "https://api.github.com/users/carl-m-healy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/carl-m-healy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carl-m-healy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/carl-m-healy",
      "user_view_type": "public"
    },
    "comments_url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449/comments",
    "commit": {
      "author": {
        "date": "2024-12-28T19:49:27Z",
        "email": "carl.m.healy@gmail.com",
        "name": "Carl"
      },
      "comment_count": 0,
      "committer": {
        "date": "2024-12-28T19:49:27Z",
        "email": "carl.m.healy@gmail.com",
        "name": "Carl"
      },
      "message": "feat(ai-agent): improve exercise generation with structured outputs\n\n- Add enum-based validation for categorical fields\n- Implement structured progression model\n- Add better error handling and validation\n- Switch to OpenAI function calling\n- Improve system prompts and guidelines\n- Add standardized API responses",
      "tree": {
        "sha": "227557f7c5fb3042269014b9eca9cef430aaac9f",
        "url": "https://api.github.com/repos/carl-m-healy/workout_app/git/trees/227557f7c5fb3042269014b9eca9cef430aaac9f"
      },
      "url": "https://api.github.com/repos/carl-m-healy/workout_app/git/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449",
      "verification": {
        "payload": null,
        "reason": "unsigned",
        "signature": null,
        "verified": false,
        "verified_at": null
      }
    },
    "committer": {
      "avatar_url": "https://avatars.githubusercontent.com/u/62735761?v=4",
      "events_url": "https://api.github.com/users/carl-m-healy/events{/privacy}",
      "followers_url": "https://api.github.com/users/carl-m-healy/followers",
      "following_url": "https://api.github.com/users/carl-m-healy/following{/other_user}",
      "gists_url": "https://api.github.com/users/carl-m-healy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/carl-m-healy",
      "id": 62735761,
      "login": "carl-m-healy",
      "node_id": "MDQ6VXNlcjYyNzM1NzYx",
      "organizations_url": "https://api.github.com/users/carl-m-healy/orgs",
      "received_events_url": "https://api.github.com/users/carl-m-healy/received_events",
      "repos_url": "https://api.github.com/users/carl-m-healy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/carl-m-healy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carl-m-healy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/carl-m-healy",
      "user_view_type": "public"
    },
    "html_url": "https://github.com/carl-m-healy/workout_app/commit/f7cd7fc8fdceba65aad921085a1027a84ac61449",
    "node_id": "C_kwDONjTMy9oAKGY3Y2Q3ZmM4ZmRjZWJhNjVhYWQ5MjEwODVhMTAyN2E4NGFjNjE0NDk",
    "parents": [
      {
        "html_url": "https://github.com/carl-m-healy/workout_app/commit/71ca6c6d02d3f00ba6360600342489db8d366439",
        "sha": "71ca6c6d02d3f00ba6360600342489db8d366439",
        "url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/71ca6c6d02d3f00ba6360600342489db8d366439"
      }
    ],
    "sha": "f7cd7fc8fdceba65aad921085a1027a84ac61449",
    "url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449"
  },
  "commit_full": {
    "author": {
      "avatar_url": "https://avatars.githubusercontent.com/u/62735761?v=4",
      "events_url": "https://api.github.com/users/carl-m-healy/events{/privacy}",
      "followers_url": "https://api.github.com/users/carl-m-healy/followers",
      "following_url": "https://api.github.com/users/carl-m-healy/following{/other_user}",
      "gists_url": "https://api.github.com/users/carl-m-healy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/carl-m-healy",
      "id": 62735761,
      "login": "carl-m-healy",
      "node_id": "MDQ6VXNlcjYyNzM1NzYx",
      "organizations_url": "https://api.github.com/users/carl-m-healy/orgs",
      "received_events_url": "https://api.github.com/users/carl-m-healy/received_events",
      "repos_url": "https://api.github.com/users/carl-m-healy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/carl-m-healy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carl-m-healy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/carl-m-healy",
      "user_view_type": "public"
    },
    "comments_url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449/comments",
    "commit": {
      "author": {
        "date": "2024-12-28T19:49:27Z",
        "email": "carl.m.healy@gmail.com",
        "name": "Carl"
      },
      "comment_count": 0,
      "committer": {
        "date": "2024-12-28T19:49:27Z",
        "email": "carl.m.healy@gmail.com",
        "name": "Carl"
      },
      "message": "feat(ai-agent): improve exercise generation with structured outputs\n\n- Add enum-based validation for categorical fields\n- Implement structured progression model\n- Add better error handling and validation\n- Switch to OpenAI function calling\n- Improve system prompts and guidelines\n- Add standardized API responses",
      "tree": {
        "sha": "227557f7c5fb3042269014b9eca9cef430aaac9f",
        "url": "https://api.github.com/repos/carl-m-healy/workout_app/git/trees/227557f7c5fb3042269014b9eca9cef430aaac9f"
      },
      "url": "https://api.github.com/repos/carl-m-healy/workout_app/git/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449",
      "verification": {
        "payload": null,
        "reason": "unsigned",
        "signature": null,
        "verified": false,
        "verified_at": null
      }
    },
    "committer": {
      "avatar_url": "https://avatars.githubusercontent.com/u/62735761?v=4",
      "events_url": "https://api.github.com/users/carl-m-healy/events{/privacy}",
      "followers_url": "https://api.github.com/users/carl-m-healy/followers",
      "following_url": "https://api.github.com/users/carl-m-healy/following{/other_user}",
      "gists_url": "https://api.github.com/users/carl-m-healy/gists{/gist_id}",
      "gravatar_id": "",
      "html_url": "https://github.com/carl-m-healy",
      "id": 62735761,
      "login": "carl-m-healy",
      "node_id": "MDQ6VXNlcjYyNzM1NzYx",
      "organizations_url": "https://api.github.com/users/carl-m-healy/orgs",
      "received_events_url": "https://api.github.com/users/carl-m-healy/received_events",
      "repos_url": "https://api.github.com/users/carl-m-healy/repos",
      "site_admin": false,
      "starred_url": "https://api.github.com/users/carl-m-healy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/carl-m-healy/subscriptions",
      "type": "User",
      "url": "https://api.github.com/users/carl-m-healy",
      "user_view_type": "public"
    },
    "files": [
      {
        "additions": 207,
        "blob_url": "https://github.com/carl-m-healy/workout_app/blob/f7cd7fc8fdceba65aad921085a1027a84ac61449/ai_agent%2Fapp%2Fmain.py",
        "changes": 284,
        "contents_url": "https://api.github.com/repos/carl-m-healy/workout_app/contents/ai_agent%2Fapp%2Fmain.py?ref=f7cd7fc8fdceba65aad921085a1027a84ac61449",
        "deletions": 77,
        "filename": "ai_agent/app/main.py",
        "patch": "@@ -1,10 +1,10 @@\n from fastapi import FastAPI, HTTPException\n-from pydantic import BaseModel, Field\n+from pydantic import BaseModel, Field, constr\n+from enum import Enum\n import httpx\n-from typing import Optional, List, Dict, Any\n+from typing import Optional, List, Dict, Literal\n from dotenv import load_dotenv\n import os\n-import json\n from openai import AsyncOpenAI\n \n load_dotenv()\n@@ -19,78 +19,169 @@\n \n client = AsyncOpenAI(api_key=OPENAI_API_KEY)\n \n+class ExerciseCategory(str, Enum):\n+    STRENGTH = \"Strength\"\n+    CARDIO = \"Cardio\"\n+    FLEXIBILITY = \"Flexibility\"\n+    BALANCE = \"Balance\"\n+    POWER = \"Power\"\n+    ENDURANCE = \"Endurance\"\n+\n+class SkillLevel(str, Enum):\n+    BEGINNER = \"Beginner\"\n+    INTERMEDIATE = \"Intermediate\"\n+    ADVANCED = \"Advanced\"\n+    ELITE = \"Elite\"\n+\n+class MovementType(str, Enum):\n+    COMPOUND = \"Compound\"\n+    ISOLATION = \"Isolation\"\n+\n+class Mechanics(str, Enum):\n+    PUSH = \"Push\"\n+    PULL = \"Pull\"\n+    SQUAT = \"Squat\"\n+    HINGE = \"Hinge\"\n+    ROTATION = \"Rotation\"\n+    CARRY = \"Carry\"\n+\n+class PlaneOfMotion(str, Enum):\n+    SAGITTAL = \"Sagittal\"\n+    FRONTAL = \"Frontal\"\n+    TRANSVERSE = \"Transverse\"\n+    MULTIPLANAR = \"Multiplanar\"\n+\n+class EnergySystem(str, Enum):\n+    AEROBIC = \"Aerobic\"\n+    ANAEROBIC_LACTIC = \"Anaerobic Lactic\"\n+    ANAEROBIC_ALACTIC = \"Anaerobic Alactic\"\n+    MIXED = \"Mixed\"\n+\n+class Modality(str, Enum):\n+    BODYWEIGHT = \"Bodyweight\"\n+    FREE_WEIGHTS = \"Free Weights\"\n+    MACHINES = \"Machines\"\n+    CABLES = \"Cables\"\n+    RESISTANCE_BANDS = \"Resistance Bands\"\n+    SUSPENSION = \"Suspension\"\n+\n+class StabilityRequirement(str, Enum):\n+    STATIC = \"Static\"\n+    DYNAMIC = \"Dynamic\"\n+    REACTIVE = \"Reactive\"\n+\n+class ExecutionType(str, Enum):\n+    UNILATERAL = \"Unilateral\"\n+    BILATERAL = \"Bilateral\"\n+\n+class RangeOfMotion(str, Enum):\n+    FULL = \"Full\"\n+    PARTIAL = \"Partial\"\n+    EXTENDED = \"Extended\"\n+\n+class MuscleActionType(str, Enum):\n+    CONCENTRIC = \"Concentric\"\n+    ECCENTRIC = \"Eccentric\"\n+    ISOMETRIC = \"Isometric\"\n+    PLYOMETRIC = \"Plyometric\"\n+\n+class Progression(BaseModel):\n+    name: str = Field(..., description=\"Name of the variation\")\n+    description: str = Field(..., description=\"Description of how this variation differs\")\n+    difficulty_level: str = Field(..., description=\"Relative difficulty of this variation (Beginner, Intermediate, Advanced, Elite)\")\n+    setup_changes: Optional[str] = Field(None, description=\"Changes in setup or equipment needed\")\n+    technique_changes: Optional[str] = Field(None, description=\"Changes in technique or form\")\n+\n+    @property\n+    def skill_level(self) -> SkillLevel:\n+        \"\"\"Convert string difficulty level to SkillLevel enum\"\"\"\n+        return SkillLevel(self.difficulty_level)\n+\n+    def model_dump(self, *args, **kwargs):\n+        \"\"\"Ensure difficulty_level is a valid string value\"\"\"\n+        data = super().model_dump(*args, **kwargs)\n+        if isinstance(data[\"difficulty_level\"], dict):\n+            # Extract the first key as the difficulty level\n+            data[\"difficulty_level\"] = next(iter(data[\"difficulty_level\"]))\n+        return data\n+\n+class VariantsAndProgressions(BaseModel):\n+    regressions: List[Progression] = Field(default_factory=list, description=\"Easier variations of the exercise\")\n+    progressions: List[Progression] = Field(default_factory=list, description=\"Harder variations of the exercise\")\n+\n+    def model_dump(self, *args, **kwargs):\n+        \"\"\"Handle nested model dumping\"\"\"\n+        data = super().model_dump(*args, **kwargs)\n+        data[\"regressions\"] = [\n+            prog if isinstance(prog, dict) else prog.model_dump(*args, **kwargs)\n+            for prog in self.regressions\n+        ]\n+        data[\"progressions\"] = [\n+            prog if isinstance(prog, dict) else prog.model_dump(*args, **kwargs)\n+            for prog in self.progressions\n+        ]\n+        return data\n+\n class ExerciseRequest(BaseModel):\n-    name: str = Field(..., description=\"Name of the exercise to generate data for\")\n+    name: constr(min_length=2, max_length=100) = Field(..., description=\"Name of the exercise to generate data for\")\n \n class Exercise(BaseModel):\n-    name: str = Field(..., description=\"Name of the exercise\")\n-    description: str = Field(..., description=\"Detailed description of how to perform the exercise\")\n-    category: str = Field(..., description=\"Main category of the exercise (e.g., Strength, Cardio, Flexibility)\")\n+    name: constr(min_length=2, max_length=100) = Field(..., description=\"Name of the exercise\")\n+    description: constr(min_length=50) = Field(..., description=\"Detailed description of how to perform the exercise\")\n+    category: ExerciseCategory = Field(..., description=\"Main category of the exercise\")\n     subcategory: Optional[str] = Field(None, description=\"Specific subcategory within the main category\")\n-    target_muscles: Optional[List[str]] = Field(None, description=\"List of muscles targeted by the exercise\")\n+    target_muscles: List[str] = Field(..., min_items=1, description=\"List of muscles targeted by the exercise\")\n     equipment: Optional[List[str]] = Field(None, description=\"Equipment needed for the exercise\")\n-    skill_level: Optional[str] = Field(None, description=\"Required skill level (e.g., Beginner, Intermediate, Advanced)\")\n-    movement_type: Optional[str] = Field(None, description=\"Type of movement (e.g., Compound, Isolation)\")\n-    mechanics: Optional[str] = Field(None, description=\"Exercise mechanics (e.g., Push, Pull)\")\n-    plane_of_motion: Optional[str] = Field(None, description=\"Plane of motion (e.g., Sagittal, Frontal, Transverse)\")\n-    primary_movement_pattern: Optional[str] = Field(None, description=\"Primary movement pattern (e.g., Squat, Hinge, Push)\")\n-    energy_system: Optional[str] = Field(None, description=\"Energy system used (e.g., Aerobic, Anaerobic)\")\n-    modality: Optional[str] = Field(None, description=\"Exercise modality (e.g., Bodyweight, Free Weights)\")\n-    stability_requirement: Optional[str] = Field(None, description=\"Stability requirement (e.g., Static, Dynamic)\")\n-    execution_type: Optional[str] = Field(None, description=\"Type of execution (e.g., Unilateral, Bilateral)\")\n-    range_of_motion: Optional[str] = Field(None, description=\"Range of motion (e.g., Full, Partial)\")\n-    muscle_action_type: Optional[str] = Field(None, description=\"Type of muscle action (e.g., Concentric, Eccentric)\")\n-    contraindications: Optional[str] = Field(None, description=\"Any contraindications or warnings\")\n-    variants_and_progressions: Optional[Dict[str, Any]] = Field(None, description=\"Exercise variations and progressions\")\n-    tags: Optional[List[str]] = Field(None, description=\"Tags for categorizing the exercise\")\n+    skill_level: SkillLevel = Field(..., description=\"Required skill level\")\n+    movement_type: MovementType = Field(..., description=\"Type of movement\")\n+    mechanics: Mechanics = Field(..., description=\"Exercise mechanics\")\n+    plane_of_motion: PlaneOfMotion = Field(..., description=\"Plane of motion\")\n+    primary_movement_pattern: Mechanics = Field(..., description=\"Primary movement pattern\")\n+    energy_system: EnergySystem = Field(..., description=\"Energy system used\")\n+    modality: Modality = Field(..., description=\"Exercise modality\")\n+    stability_requirement: StabilityRequirement = Field(..., description=\"Stability requirement\")\n+    execution_type: ExecutionType = Field(..., description=\"Type of execution\")\n+    range_of_motion: RangeOfMotion = Field(..., description=\"Range of motion\")\n+    muscle_action_type: MuscleActionType = Field(..., description=\"Type of muscle action\")\n+    contraindications: str = Field(..., description=\"Any contraindications or warnings\")\n+    variants_and_progressions: VariantsAndProgressions = Field(..., description=\"Exercise variations and progressions\")\n+    tags: List[str] = Field(..., min_items=1, description=\"Tags for categorizing the exercise\")\n \n async def generate_exercise_data(name: str) -> Exercise:\n-    \"\"\"Generate exercise data using OpenAI.\"\"\"\n-    system_prompt = \"\"\"You are an expert exercise science professional. Your task is to analyze exercise names \n-    and provide detailed, accurate information about their execution, characteristics, and classifications. \n-    Use precise terminology and provide comprehensive details for each field. Base your responses on \n-    established exercise science principles and best practices.\n-    \n-    Provide your response as a JSON object with the following structure:\n-    {\n-        \"name\": \"exercise name\",\n-        \"description\": \"detailed step-by-step instructions\",\n-        \"category\": \"main category\",\n-        \"subcategory\": \"specific subcategory if applicable\",\n-        \"target_muscles\": [\"primary muscle\", \"secondary muscle\", ...],\n-        \"equipment\": [\"required equipment\"],\n-        \"skill_level\": \"difficulty level\",\n-        \"movement_type\": \"compound or isolation\",\n-        \"mechanics\": \"push, pull, etc\",\n-        \"plane_of_motion\": \"sagittal, frontal, etc\",\n-        \"primary_movement_pattern\": \"squat, hinge, etc\",\n-        \"energy_system\": \"aerobic or anaerobic\",\n-        \"modality\": \"bodyweight, free weights, etc\",\n-        \"stability_requirement\": \"static or dynamic\",\n-        \"execution_type\": \"unilateral or bilateral\",\n-        \"range_of_motion\": \"full or partial\",\n-        \"muscle_action_type\": \"concentric, eccentric, etc\",\n-        \"contraindications\": \"warnings and precautions\",\n-        \"variants_and_progressions\": {\n-            \"regressions\": [\"easier variations\"],\n-            \"progressions\": [\"harder variations\"]\n-        },\n-        \"tags\": [\"relevant\", \"tags\", \"for\", \"categorization\"]\n-    }\n+    \"\"\"Generate exercise data using OpenAI with function calling.\"\"\"\n+    system_prompt = \"\"\"You are an expert exercise science professional with deep knowledge of biomechanics, \n+    exercise physiology, and training methodology. Your task is to analyze exercise names and provide detailed, \n+    accurate information about their execution, characteristics, and classifications.\n+\n+    Important guidelines:\n+    1. Provide comprehensive, step-by-step descriptions that ensure safe and effective execution\n+    2. Be precise with anatomical terms and movement descriptions\n+    3. Consider all aspects of the exercise including setup, execution, breathing, and common mistakes\n+    4. Include specific form cues and coaching points\n+    5. Be thorough with contraindications and safety warnings\n+    6. Provide progressive variations that follow sound training principles\n+    7. Use standardized terminology consistent with exercise science literature\n+    8. Consider the practical application and real-world context of each exercise\n     \"\"\"\n \n     try:\n         response = await client.chat.completions.create(\n-            model=\"gpt-4\",\n+            model=\"gpt-4-0125-preview\",\n             messages=[\n                 {\"role\": \"system\", \"content\": system_prompt},\n-                {\"role\": \"user\", \"content\": f\"Generate detailed information for the exercise: {name}. Respond with valid JSON only, no additional text.\"}\n+                {\"role\": \"user\", \"content\": f\"Generate detailed information for the exercise: {name}\"}\n             ],\n+            functions=[{\n+                \"name\": \"create_exercise\",\n+                \"description\": \"Create a detailed exercise entry with all relevant information\",\n+                \"parameters\": Exercise.model_json_schema()\n+            }],\n+            function_call={\"name\": \"create_exercise\"},\n             temperature=0.7\n         )\n         \n-        exercise_data = json.loads(response.choices[0].message.content)\n-        return Exercise(**exercise_data)\n+        function_args = response.choices[0].message.function_call.arguments\n+        return Exercise.model_validate_json(function_args)\n     except Exception as e:\n         raise HTTPException(\n             status_code=500,\n@@ -106,45 +197,84 @@ async def check_exercise_exists(name: str) -> bool:\n         except httpx.RequestError:\n             raise HTTPException(status_code=503, detail=\"Unable to communicate with main API\")\n \n+class APIResponse(BaseModel):\n+    \"\"\"Standardized API response model\"\"\"\n+    success: bool\n+    data: Optional[Dict] = None\n+    error: Optional[str] = None\n+\n async def create_exercise(exercise_data: dict) -> dict:\n+    \"\"\"Create exercise in the main API with improved error handling\"\"\"\n     async with httpx.AsyncClient() as client:\n         try:\n-            response = await client.post(f\"{API_URL}/exercises/\", json=exercise_data)\n+            # Validate the exercise data against our schema before sending\n+            exercise = Exercise(**exercise_data)\n+            \n+            # Convert to dict and send to API\n+            response = await client.post(\n+                f\"{API_URL}/exercises/\", \n+                json=exercise.model_dump(exclude_none=True)\n+            )\n+            \n             if response.status_code in [200, 201]:\n                 return response.json()\n             else:\n+                error_detail = response.json().get('detail', 'Unknown error')\n                 raise HTTPException(\n                     status_code=response.status_code,\n-                    detail=\"Failed to create exercise in main API\"\n+                    detail=f\"Failed to create exercise: {error_detail}\"\n                 )\n-        except httpx.RequestError:\n-            raise HTTPException(status_code=503, detail=\"Unable to communicate with main API\")\n+        except ValueError as e:\n+            # Handle validation errors\n+            raise HTTPException(\n+                status_code=422,\n+                detail=f\"Invalid exercise data: {str(e)}\"\n+            )\n+        except httpx.RequestError as e:\n+            # Handle network/connection errors\n+            raise HTTPException(\n+                status_code=503,\n+                detail=f\"Unable to communicate with main API: {str(e)}\"\n+            )\n \n-@app.post(\"/generate\")\n+@app.post(\"/generate\", response_model=APIResponse)\n async def generate_exercise(request: ExerciseRequest):\n     \"\"\"\n-    Generate exercise data using AI and create it in the main API if it doesn't exist\n+    Generate exercise data using AI and create it in the main API if it doesn't exist.\n+    Returns a standardized API response.\n     \"\"\"\n-    # Check if exercise already exists\n-    exists = await check_exercise_exists(request.name)\n-    if exists:\n-        raise HTTPException(\n-            status_code=400,\n-            detail=\"Exercise already exists in the database\"\n-        )\n-\n-    # Generate exercise data using OpenAI\n     try:\n+        # Check if exercise already exists\n+        exists = await check_exercise_exists(request.name)\n+        if exists:\n+            return APIResponse(\n+                success=False,\n+                error=\"Exercise already exists in the database\"\n+            )\n+\n+        # Generate exercise data using OpenAI\n         exercise = await generate_exercise_data(request.name)\n         exercise_dict = exercise.model_dump(exclude_none=True)\n         \n         # Create exercise in main API\n         created_exercise = await create_exercise(exercise_dict)\n-        return created_exercise\n+        \n+        return APIResponse(\n+            success=True,\n+            data=created_exercise\n+        )\n+        \n+    except HTTPException as e:\n+        # Re-raise HTTP exceptions with our standard format\n+        return APIResponse(\n+            success=False,\n+            error=str(e.detail)\n+        )\n     except Exception as e:\n-        raise HTTPException(\n-            status_code=500,\n-            detail=f\"Failed to generate exercise data: {str(e)}\"\n+        # Handle unexpected errors\n+        return APIResponse(\n+            success=False,\n+            error=f\"An unexpected error occurred: {str(e)}\"\n         )\n \n @app.get(\"/health\")",
        "raw_url": "https://github.com/carl-m-healy/workout_app/raw/f7cd7fc8fdceba65aad921085a1027a84ac61449/ai_agent%2Fapp%2Fmain.py",
        "sha": "d1f766c0c5440ad8b57b5b92d85b5e8d02852b63",
        "status": "modified"
      }
    ],
    "html_url": "https://github.com/carl-m-healy/workout_app/commit/f7cd7fc8fdceba65aad921085a1027a84ac61449",
    "node_id": "C_kwDONjTMy9oAKGY3Y2Q3ZmM4ZmRjZWJhNjVhYWQ5MjEwODVhMTAyN2E4NGFjNjE0NDk",
    "parents": [
      {
        "html_url": "https://github.com/carl-m-healy/workout_app/commit/71ca6c6d02d3f00ba6360600342489db8d366439",
        "sha": "71ca6c6d02d3f00ba6360600342489db8d366439",
        "url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/71ca6c6d02d3f00ba6360600342489db8d366439"
      }
    ],
    "sha": "f7cd7fc8fdceba65aad921085a1027a84ac61449",
    "stats": {
      "additions": 207,
      "deletions": 77,
      "total": 284
    },
    "url": "https://api.github.com/repos/carl-m-healy/workout_app/commits/f7cd7fc8fdceba65aad921085a1027a84ac61449"
  },
  "name": "feature/o1-mini-model",
  "protected": false,
  "protection": {
    "enabled": false,
    "required_status_checks": {
      "checks": [],
      "contexts": [],
      "enforcement_level": "off"
    }
  },
  "protection_url": "https://api.github.com/repos/carl-m-healy/workout_app/branches/feature/o1-mini-model/protection"
}
